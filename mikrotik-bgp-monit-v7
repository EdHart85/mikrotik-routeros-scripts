# IMPORTANT! It will only work on RouterOS version 7.x
# I adapted this script from another one that runs os RouterOS version 6 created by Cha0s (original script here https://forum.mikrotik.com/viewtopic.php?t=64572)

# Adapted by Eduardo Hartmann (https://github.com/EdHart85)


# EDIT HERE
:local arrEmails [:toarray "user1@exemple.com, user2@exemple.com"];
# EDIT END

# Define Variables
:global arrBgpState;
:global gotKey false;
:local hostNameX ([/system/identity/get name]);
:local prevStatusX;
:local peerX;
:local peerXarrEl;
:local mailToX;
:local mailSubjectX;
:local mailBodyX;
:local connStatusX;
:local arrBgpPeers [:toarray ""];
:local peerName "";
:local peerTotal "";
:local connX;
:local arrPos;



:log info ("=============BGP PEER STATUS DETECTION STARTED=============" );

# Initialize global array
:if ( [:len $arrBgpState] =0 ) do={
   :set $arrBgpState {"false"="false"};
}

# Fill arrBgpPeers array with peers name
:foreach i in=[/routing/bgp/connection/find] do={
	:set peerName [/routing/bgp/connection/get $i name];
	:set peerTotal ($peerTotal . "," .$peerName);
}
:set arrBgpPeers [:toarray $peerTotal];

# Loop through the peers array
:for arrPos from=0 to=([:len $arrBgpPeers]-1) do={

   # Set peerX to current peer name for this iteration
   :set peerX [:pick $arrBgpPeers $arrPos];
   
   # Set connX to current peer name for this iteration
   :set connX ($peerX . "-1");
   
   # Check if peer is enabled and proceed
   :if ([/routing/bgp/connection/get $peerX disabled] != true) do={
      
      # Get peer connection Status
      :set connStatusX [/routing/bgp/session/get $connX established];
	  
	  # Find peer key in global array
      :foreach k,v in=$arrBgpState do={
         if ($k != "false") do={
            :if ($gotKey = false) do={
               :if ($k = $peerX) do={
                  :set gotKey true;
               }
            }
         }
      }
      
      # Initialize arrBgpState array element with peerX name if it doesn't already exist
      :if ($gotKey = false) do={
         :set ($arrBgpState->"$peerX") "up";
      }
      
      # Reset this for the next iteration
      :set gotKey false;
      
      # Previous run peer status
      :set prevStatusX ($arrBgpState->"$peerX");
      
      # Prepare Email body
      :set mailBodyX ("Router Hostname: " . $hostNameX . "\nBGP Peer Status: " . $connStatusX . "\nBGP Peer Name: " . $peerX . "\n");
      
      # Check if BGP Peer is not established
      :if ($connStatusX != true) do={
          # Check if this is the first time the peer is down
          :if ( $prevStatusX  = "up" ) do={
            # Set value to 'down' to peer global var key
            :set ($arrBgpState->$peerX) "down";

            # Informational Log
            :log error ("BGP Peer ". $peerX ." state is DOWN. Sending email alerts!" );

            # Prepare Email subject
            :set mailSubjectX ("BGP Peer ". $peerX ." on ". $hostNameX . " is DOWN!");
            
            # Loop over emails array to send emails to all recipients in array
            :local arrPos2
            :for arrPos2 from=0 to=([:len $arrEmails]-1) do={
               # Set mailToX to recipient for this iteration
               :set mailToX [:pick $arrEmails $arrPos2];
               
               # Informational Log
               :log error ("BGP Peer " . $peerX . " status is DOWN! Sending Email alert to " . $mailToX . "." );
                
			   # Prepare Email body
			   :set mailBodyX ("Router Hostname: " . $hostNameX . "\nBGP Peer Status: DOWN \nBGP Peer Name: " . $peerX . "\n");
               
			   # Send Email
               /tool/e-mail/send to=$mailToX subject=$mailSubjectX body=$mailBodyX;
            }        

         } else={
            # Peer down. Already sent notification so do nothing.
               :log info ("BGP Peer ". $peerX ." is already DOWN. Ignoring!")
         }

      } else={

         # Check if peer just came back up and send informational email
         if ($prevStatusX = "down") do={
            
            # Prepare Email subject
            :set mailSubjectX ("BGP Peer ". $peerX ." on ". $hostNameX . " has RECOVERED!");
                     
            # Loop over emails array to send emails to all recipients in array
            :local arrPos2;
            :for arrPos2 from=0 to=([:len $arrEmails]-1) do={
               # Set mailToX to recepient for this iteration
               :set mailToX [:pick $arrEmails $arrPos2];
               
               # Informational Log
               :log warning ("BGP Peer " . $peerX . " status has RECOVERED! Sending informational Email to " . $mailToX . "." );
                     
			   # Prepare Email body
			   :set mailBodyX ("Router Hostname: " . $hostNameX . "\nBGP Peer Status: UP \nBGP Peer Name: " . $peerX . "\n");
               
			   # Send Email
               /tool/e-mail/send to=$mailToX subject=$mailSubjectX body=$mailBodyX;
            }            
            
         }
         
        :log info ("BGP Peer " . $peerX . " is UP. Nothing to do!");
         
         # Set peer status to up
         :set ($arrBgpState->$peerX) "up";
      }      
      
   } else={
         :log warning ("BGP Peer " . $peerX . " is disabled. Ignoring!");
   }
}

:log info ("=============BGP PEER STATUS DETECTION ENDED===============" );
